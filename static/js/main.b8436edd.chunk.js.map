{"version":3,"sources":["meld.js","App.js","serviceWorker.js","index.js"],"names":["MELDChart","props","state","data","width","height","chartRef","React","createRef","createGraph","bind","document","getElementById","offsetWidth","offsetHeight","resizedFn","Tabletop","init","key","callback","googleData","setState","getWidth","simpleSheet","window","addEventListener","clearTimeout","setTimeout","redrawGraph","this","d3","remove","margin","chartWidth","chartHeight","chartGroup","refs","canvas","append","attr","parseTime","console","log","dates","forEach","d","date","bilirubin","creatinine","sodium","inr","cr","bi","meld1","parseFloat","Math","toFixed","na","meld2","xTimeScale","range","domain","yLinearScale","bottomAxis","leftAxis","drawLine","defined","x","y","datum","filter","style","classed","call","circlesGroup","selectAll","enter","dateFormatter","toolTip","d3Tip","offset","html","on","show","hide","ref","Component","App","className","id","href","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8436edd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport * as d3 from 'd3';\r\nimport d3Tip from 'd3-tip';\r\nimport Tabletop from 'tabletop';\r\n\r\n// $(function() {\r\n//     d3.select(window).on(\"resize\", handleResize);\r\n\r\n//     // When the browser loads, loadChart() is called\r\n//     createGraph();\r\n    \r\n//   });\r\n\r\n// function handleResize() {\r\n//     var svgArea = d3.select(\"svg\");\r\n\r\n//     // If there is already an svg container on the page, remove it and reload the chart\r\n//     if (!svgArea.empty()) {\r\n//         svgArea.remove();\r\n//         createGraph();\r\n//     }\r\n// }\r\n\r\nclass MELDChart extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          data: [],\r\n          width: 0,\r\n          height: 100\r\n        }\r\n        this.chartRef = React.createRef();\r\n        this.createGraph = this.createGraph.bind(this);\r\n    }\r\n\r\n    getWidth(){\r\n        return document.getElementById('graph').offsetWidth;\r\n    }\r\n    getHeight(){\r\n        return document.getElementById('graph').offsetHeight;\r\n    }\r\n    \r\n    componentDidMount() {\r\n        Tabletop.init({\r\n          key: '1nA16yuLtUrdpZFpPzz-HUm-WlpPW2axHhidMOnC1TTQ',\r\n          callback: googleData => {\r\n            this.setState({\r\n                data: googleData,\r\n                width: this.getWidth(),\r\n                height: this.getWidth()/2\r\n            }, ()=>{this.createGraph()});\r\n          },\r\n          simpleSheet: true\r\n        })\r\n        let resizedFn;\r\n        window.addEventListener(\"resize\", () => {\r\n            clearTimeout(resizedFn);\r\n            resizedFn = setTimeout(() => {\r\n                this.redrawGraph();\r\n            }, 200)\r\n        });\r\n    }\r\n\r\n    redrawGraph() {\r\n        let width = this.getWidth()\r\n        this.setState({width: width, height: width/2});\r\n        d3.select(\"svg\").remove();\r\n        this.createGraph = this.createGraph.bind(this);\r\n        this.createGraph();\r\n    }\r\n\r\n    createGraph() {\r\n        var margin = {\r\n            top: 0,\r\n            right: 50,\r\n            bottom: 50,\r\n            left: 0\r\n        },\r\n            chartWidth = this.state.width - margin.left - margin.right,\r\n            chartHeight = this.state.height - margin.top - margin.bottom;\r\n\r\n        var svg = d3.select(this.refs.canvas)\r\n            .append(\"svg\")\r\n            .attr(\"height\", chartHeight)\r\n            .attr(\"width\", chartWidth);\r\n    \r\n        var chartGroup = svg.append(\"g\")\r\n            .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n        var parseTime = d3.timeParse(\"%-m/%-d/%y\");\r\n    \r\n        // d3.json('/data').then(function(data){\r\n            // version 1\r\n            // source: https://www.hepatitisc.uw.edu/go/management-cirrhosis-related-complications/liver-transplantation-referral/calculate-meld-score\r\n            // MELD(i) = round[ 0.378 * loge(bilirubin)) + (1.120*loge(INR)) + (0.957*loge(creatinine)) + 0.643 ] * 10(rounded to the tenth decimal place.)\r\n            // MELD = MELD(i) + 1.32 * (137-Na) - [0.033*MELD(i)*(137-Na)]\r\n            //Notes\r\n            //This version of the MELD calculator includes United Network for Organ Sharing (UNOS) modifications of the original model.\r\n            //The MELD utlizes log scale calculations and thus any value less than 1 is automatically given a lower limit value of 1 to prevent generating a negative score.\r\n            //The lower limit of Serum Sodium (Na) is capped at 125, and the upper limit is capped at 137.\r\n            //The upper limit of serum creatinine is capped at 4; in addition, if the patient had dialysis at least twice in the past week, the value for serum creatinine will be automatically adjusted to 4.0.\r\n            //The maximum MELD score is 40.\r\n\r\n            // source: https://en.wikipedia.org/wiki/Model_for_End-Stage_Liver_Disease\r\n            //MELD = 3.78×ln[serum bilirubin (mg/dL)] + 11.2×ln[INR] + 9.57×ln[serum creatinine (mg/dL)] + 6.43\r\n\r\n            // version 2\r\n            // source: https://www.merckmanuals.com/medical-calculators/MELDNa.htm\r\n            // MELDscore = 10 * ((0.957 * ln(Creatinine)) + (0.378 * ln(Bilirubin)) + (1.12 * ln(INR))) + 6.43\r\n            // MELDNascore = MELDscore - SerumNa - (0.025 * MELDscore * (140 - SerumNa)) + 140\r\n\r\n            // version 3\r\n            // source: https://www.mdcalc.com/meld-score-model-end-stage-liver-disease-12-older#evidence\r\n            // MELD(i) = 0.957 × ln(Cr) + 0.378 × ln(bilirubin) + 1.120 × ln(INR) + 0.643\r\n            // Then, round to the tenth decimal place and multiply by 10. \r\n            // If MELD(i) > 11, perform additional MELD calculation as follows:\r\n            // MELD = MELD(i) + 1.32 × (137 – Na) –  [ 0.033 × MELD(i) × (137 – Na) ]\r\n\r\n            console.log(this.state.data);\r\n\r\n            // var dates = JSON.parse(data);\r\n            var dates = this.state.data;\r\n\r\n            dates.forEach(function(d) {\r\n                d.date = parseTime(d['Date']);\r\n                d.bilirubin = +d['Bilirubin Total (Calculated)0.2 - 1.2 mg/dL'];\r\n                d.creatinine = +d['Creatinine0.60 - 1.30 mg/dL'];\r\n                d.sodium = +d['Na135 - 144 mmol/L'];\r\n                d.inr = +d['INR 0.9 - 1.1'];\r\n            });\r\n\r\n            // version 3\r\n            dates.forEach(function(d) {\r\n                if (d.creatinine > 0 && d.bilirubin > 0 && d.inr > 0){\r\n                    var cr = d.creatinine < 1 ? 1 : d.creatinine;\r\n                    var inr = d.inr < 1 ? 1 : d.inr;\r\n                    var bi = d.bilirubin < 1 ? 1 : d.bilirubin;\r\n                    d.meld1 = (10 * parseFloat(0.957 * Math.log(cr) + 0.378 * Math.log(bi) + 1.12 * Math.log(inr) + 0.643).toFixed(1));\r\n                }\r\n                else {d.meld1 = 0;}\r\n            });\r\n\r\n            dates.forEach(function(d) {\r\n                if (d.meld1 > 11 && d.sodium > 0) {\r\n                    var na = d.sodium;\r\n                    if (d.sodium < 125) {\r\n                        na = 125;\r\n                    }\r\n                    else if (d.sodium > 137) {\r\n                        na = 137;\r\n                    }\r\n                    d.meld2 = parseFloat((d.meld1+1.32*(137-na)-(0.033*d.meld1*(137-na))).toFixed(1));\r\n                }\r\n                else {d.meld2 = d.meld1;}\r\n            });\r\n\r\n\r\n            // version 2\r\n            // dates.forEach(function(d) {\r\n            //     if (d.creatinine > 0 && d.bilirubin > 0 && d.inr > 0){\r\n            //         d.meld1 = (10 * ((0.957 * Math.log(d.creatinine)) + (0.378 * Math.log(d.bilirubin)) + (1.12 * Math.log(d.inr))) + 6.43);\r\n            //     }\r\n            //     else {d.meld1 = 0;}\r\n            // });\r\n\r\n            // dates.forEach(function(d) {\r\n            //     if (d.meld1 > 0 && d.sodium > 0) {\r\n            //         d.meld2 = parseFloat((d.meld1 - d.sodium - (0.025 * d.meld1 * (140 - d.sodium)) + 140).toFixed(1));\r\n            //     }\r\n            //     else {d.meld2 = 0;}\r\n            // });\r\n\r\n            // version 1\r\n            // dates.forEach(function(d) {\r\n            //     if (d.creatinine > 0 && d.bilirubin > 0 && d.inr > 0){\r\n            //         d.meld1 = parseFloat((((0.378*Math.log(d.bilirubin)) + (1.12*Math.log(d.inr)) + (0.957*Math.log(d.creatinine)) + 0.643) * 10).toFixed(1));\r\n            //     }\r\n            //     else {d.meld1 = 0;}\r\n            // });\r\n\r\n            // dates.forEach(function(d) {\r\n            //     if (d.meld1 > 0 && d.sodium > 0) {\r\n            //         d.meld2 = parseFloat((d.meld1+1.32*(137-d.sodium)-(0.033*d.meld1*(137-d.sodium))).toFixed(1));\r\n            //     }\r\n            //     else {d.meld2 = 0;}\r\n            // });\r\n\r\n\r\n            var xTimeScale = d3.scaleTime()\r\n                .range([0, chartWidth])\r\n                .domain(d3.extent(dates, d => d.date));\r\n\r\n            var yLinearScale = d3.scaleLinear()\r\n                .range([chartHeight, 0])\r\n                .domain([0, d3.max(dates, d => d.meld2)]);\r\n                \r\n            var bottomAxis = d3.axisBottom(xTimeScale);\r\n            var leftAxis = d3.axisLeft(yLinearScale);\r\n            \r\n            var drawLine = d3\r\n                .line()\r\n                .defined(d => d.meld2 > 0)\r\n                .x(d => xTimeScale(d.date))\r\n                .y(d => yLinearScale(d.meld2));\r\n            \r\n            chartGroup.append(\"path\")\r\n                .datum(dates.filter(drawLine.defined()))\r\n                .attr(\"d\", drawLine)\r\n                .style(\"stroke-dasharray\", (\"3, 3\"))\r\n                .classed(\"line\", true);\r\n            \r\n            chartGroup.append(\"path\")\r\n                .datum(dates)\r\n                .classed(\"line\", true)\r\n                .attr(\"d\", drawLine);\r\n            \r\n            chartGroup.append(\"g\")\r\n                .classed(\"axis\", true)\r\n                .call(leftAxis);\r\n            \r\n            chartGroup.append(\"g\")\r\n                .classed(\"axis\", true)\r\n                .attr(\"transform\", \"translate(0, \" + chartHeight + \")\")\r\n                .call(bottomAxis);\r\n\r\n            var circlesGroup = chartGroup.selectAll(\"circle\")\r\n                .data(dates.filter(drawLine.defined()))\r\n                .enter()\r\n                .append(\"circle\")\r\n                .attr(\"cx\", d => xTimeScale(d.date))\r\n                .attr(\"cy\", d => yLinearScale(d.meld2))\r\n                .attr(\"r\", \"8\")\r\n                .attr(\"fill\", \"gold\");\r\n\r\n            var dateFormatter = d3.timeFormat(\"%-m/%-d/%y\");\r\n\r\n            var toolTip = d3Tip()\r\n                .attr(\"class\", \"tooltip\")\r\n                .offset([50, 70])\r\n                .html(function(d) {\r\n                    return (`<h4>${dateFormatter(d.date)}: ${d.meld2}</h4><hr><p>bilirubin: ${d.bilirubin}<br>creatinine: ${d.creatinine}<br>INR: ${d.inr}<br>sodium: ${d.sodium}</p>`);\r\n                });\r\n        \r\n            chartGroup.call(toolTip);\r\n        \r\n            circlesGroup.on(\"mouseover\", function(d) {\r\n                toolTip.show(d, this);\r\n                })\r\n                .on(\"mouseout\", function(d) {\r\n                    toolTip.hide(d);\r\n                });\r\n            \r\n            // }).catch(function(error) {\r\n            // console.log(error);          \r\n        // });\r\n    }\r\n    render() {\r\n        console.log('updated state --->', this.state)  \r\n        return <div ref=\"canvas\"></div> \r\n    }\r\n}\r\nexport default MELDChart\r\n","import React from 'react';\nimport MELDChart from './meld.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>MELD Score Chart</h1>\n      </header>\n      <div id=\"graph\"><MELDChart /></div>\n      <footer className=\"App-footer\">\n        <p>formula source: <a href=\"https://www.mdcalc.com/meld-score-model-end-stage-liver-disease-12-older#evidence\">mdcalc</a> | raw data: <a href=\"https://docs.google.com/spreadsheets/d/1nA16yuLtUrdpZFpPzz-HUm-WlpPW2axHhidMOnC1TTQ\">google sheet</a>\n        <br />MELD(i) = 0.957 × ln(Cr) + 0.378 × ln(bilirubin) + 1.120 × ln(INR) + 0.643 then, round to the tenth decimal place and multiply by 10. \n        <br />If MELD(i) > 11, perform additional MELD calculation as follows: MELD = MELD(i) + 1.32 × (137 – Na) –  [ 0.033 × MELD(i) × (137 – Na) ]\n        <br />Cr, bilirubin and INR values floored to 1; Na floored to 125 and ceilinged to 137.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}